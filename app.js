import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
import { getAnalytics } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-analytics.js";
import { getAuth, signInWithEmailAndPassword, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js";
import { getFirestore, enableIndexedDbPersistence, collection, onSnapshot, query, orderBy, getDocs, limit, doc, setDoc } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";
import { getMessaging, getToken, onMessage } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-messaging.js";
import { t, showNotification } from './utils.js';
import { closeAllPopupsUI, openPopup, showPage, renderProducts, renderSkeletonLoader, renderCart, renderFavoritesPage, renderCategoriesSheet, searchProductsInFirestore, renderMainCategories, checkNewAnnouncements, renderPolicies, setupGpsButton, renderSubcategories, renderSubSubcategories, changePromoCard, renderHomePageContent, updateActiveNav, renderCartActionButtons } from './ui-handlers.js';
import { updateAdminUI, loadPoliciesForAdmin, renderAdminAnnouncementsList, renderContactMethodsAdmin, renderSocialMediaLinksAdmin, renderCategoryManagementUI, populateSubcategoriesDropdown } from './admin-handlers.js';

const firebaseConfig = { apiKey: "AIzaSyBxyy9e0FIsavLpWCFRMqgIbUU2IJV8rqE", authDomain: "maten-store.firebaseapp.com", projectId: "maten-store", storageBucket: "maten-store.appspot.com", messagingSenderId: "137714858202", appId: "1:137714858202:web:e2443a0b26aac6bb56cde3", measurementId: "G-1PV3DRY2V2" };

const app = initializeApp(firebaseConfig); const analytics = getAnalytics(app); export const auth = getAuth(app); export const db = getFirestore(app); export const messaging = getMessaging(app);

// Export collections and translations
export const productsCollection = collection(db, "products"); export const categoriesCollection = collection(db, "categories"); export const announcementsCollection = collection(db, "announcements"); export const promoCardsCollection = collection(db, "promo_cards");
export const translations = { ku_sorani: { search_placeholder: "گەڕان بە ناوی کاڵا...", admin_login_title: "چوونەژوورەوەی بەڕێوەبەر", email_label: "ئیمەیڵ:", password_label: "وشەی نهێنی:", login_button: "چوونەژوورەوە", cart_title: "سەبەتەی کڕین", cart_empty: "سەبەتەکەت بەتاڵە", total_price: "کۆی گشتی:", send_whatsapp: "ناردن لە ڕێگەی واتسئاپ", send_viber: "ناردن لە ڕێگەی فایبەر", send_telegram: "ناردن لە ڕێگەی تێلێگرام", favorites_title: "لیستی دڵخوازەکان", favorites_empty: "لیستی دڵخوازەکانت بەتاڵە", choose_category: "هەڵبژاردنی جۆر", all_products: "هەموو کاڵاکان", loading_products: "...خەریکی بارکردنی کاڵاکانە", settings_title: "ڕێکخستنەکان", language_label: "زمان", profile_title: "پڕۆفایلی من", admin_login_nav: "چوونەژوورەوەی بەڕێوەبەر", logout_nav: "چوونەدەرەوە", profile_name: "ناو:", profile_address: "ناونیشان:", profile_phone: "ژمارەی تەلەفۆن:", save_button: "پاشەکەوتکردن", nav_home: "سەرەکی", nav_categories: "جۆرەکان", nav_cart: "سەبەتە", nav_profile: "پڕۆفایل", nav_settings: "ڕێکخستن", contact_us_title: "پەیوەندیمان پێوە بکە", add_to_cart: "زیادکردن بۆ سەبەتە", added_to_cart: "زیادکرا", product_not_found_error: "هەڵە: کاڵاکە نەدۆزرایەوە!", delete_confirm: "دڵنیایت دەتەوێت ئەم کاڵایە بسڕیتەوە؟", product_deleted: "کاڵا سڕدرایەوە", product_delete_error: "هەڵە لە سڕینەوەی کاڵا", order_greeting: "سڵاو! من پێویستم بەم کاڵایانەی خوارەوەیە:", order_item_details: "نرخ: {price} د.ع. | ژمارە: {quantity}", order_total: "کۆی گشتی", order_user_info: "--- زانیاری داواکار ---", order_user_name: "ناو", order_user_address: "ناونیشان", order_user_phone: "ژمارەی تەلەفۆن", order_prompt_info: "تکایە ناونیشان و زانیارییەکانت بنێرە بۆ گەیاندن.", login_error: "ئیمەیڵ یان وشەی نهێنی هەڵەیە", logout_success: "بە سەرکەوتوویی چوویتەدەرەوە", profile_saved: "زانیارییەکانی پڕۆفایل پاشەکەوتکران", all_categories_label: "هەموو", install_app: "دامەزراندنی ئەپ", product_added_to_cart: "کاڵاکە زیادکرا بۆ سەبەتە", product_added_to_favorites: "زیادکرا بۆ لیستی دڵخوازەکان", product_removed_from_favorites: "لە لیستی دڵخوازەکان سڕدرایەوە", manage_categories_title: "بەڕێوەبردنی جۆرەکان", manage_contact_methods_title: "بەڕێوەبردنی شێوازەکانی ناردنی داواکاری", notifications_title: "ئاگەهدارییەکان", no_notifications_found: "هیچ ئاگەهدارییەک نییە", manage_announcements_title: "ناردنی ئاگەهداری گشتی", send_new_announcement: "ناردنی ئاگەهداری نوێ", send_announcement_button: "ناردنی ئاگەهداری", sent_announcements: "ئاگەهدارییە نێردراوەکان", no_announcements_sent: "هیچ ئاگەهدارییەک نەنێردراوە", announcement_deleted_success: "ئاگەدارییەکە سڕدرایەوە", announcement_delete_confirm: "دڵنیایت دەتەوێت ئەم ئاگەهدارییە بسڕیتەوە؟", enable_notifications: "چالاککردنی ئاگەدارییەکان", error_generic: "هەڵەیەک ڕوویدا!", terms_policies_title: "مەرج و ڕێساکان", manage_policies_title: "بەڕێوەبردنی مەرج و ڕێساکان", policies_saved_success: "مەرج و ڕێساکان پاشەکەوتکران", loading_policies: "...خەریکی بارکردنی ڕێساکانە", no_policies_found: "هیچ مەرج و ڕێسایەک دانەنراوە.", has_discount_badge: "داشکانی تێدایە", force_update: "ناچارکردن بە نوێکردنەوە (سڕینەوەی کاش)", update_confirm: "دڵنیایت دەتەوێت ئەپەکە نوێ بکەیتەوە؟ هەموو کاشی ناو وێبگەڕەکەت دەسڕدرێتەوە.", update_success: "ئەپەکە بە سەرکەوتوویی نوێکرایەوە!", newest_products: "نوێترین کاڵاکان", see_all: "بینینی هەمووی", all_products_section_title: "هەموو کاڵاکان", }, ku_badini: { search_placeholder: "لێگەریان ب ناڤێ کاڵای...", admin_login_title: "چوونا ژوور یا بەرپرسى", email_label: "ئیمەیل:", password_label: "پەیڤا نهێنى:", login_button: "چوونا ژوور", cart_title: "سەلکا کرینێ", cart_empty: "سەلکا تە یا ڤالایە", total_price: "کۆمێ گشتی:", send_whatsapp: "فرێکرن ب رێکا واتسئاپ", send_viber: "فرێکرن ب رێکا ڤایبەر", send_telegram: "فرێکرن ب رێکا تێلێگرام", favorites_title: "لیستا حەزژێکریان", favorites_empty: "لیستا حەزژێکریێن تە یا ڤالایە", choose_category: "جورەکی هەلبژێرە", all_products: "هەمی کاڵا", loading_products: "...د بارکرنا کاڵایان دایە", settings_title: "ڕێکخستن", language_label: "زمان", profile_title: "پروفایلێ من", admin_login_nav: "چوونا ژوور یا بەرپرسى", logout_nav: "چوونا دەر", profile_name: "ناڤ:", profile_address: "ناڤ و نیشان:", profile_phone: "ژمارا تەلەفونێ:", save_button: "پاشەکەفتکرن", nav_home: "سەرەکی", nav_categories: "جۆر", nav_cart: "سەلک", nav_profile: "پروفایل", nav_settings: "ڕێکخستن", contact_us_title: "پەیوەندیێ ب مە بکە", add_to_cart: "زێدەکرن بۆ سەلکێ", added_to_cart: "زێدەکر", product_not_found_error: "خەلەتی: کاڵا نەهاتە دیتن!", delete_confirm: "تو پشتڕاستی دێ ڤی کاڵای ژێبەى؟", product_deleted: "کاڵا هاتە ژێبرن", product_delete_error: "خەلەتی د ژێبرنا کاڵای دا", order_greeting: "سلاڤ! ئەز پێدڤی ب ڤان کاڵایێن خوارێ مە:", order_item_details: "بها: {price} د.ع. | ژمارە: {quantity}", order_total: "کۆمێ گشتی", order_user_info: "--- پێزانینێن داخازکەری ---", order_user_name: "ناڤ", order_user_address: "ناڤ و نیشان", order_user_phone: "ژمارا تەلەفونێ", order_prompt_info: "هیڤی دکەین ناڤ و نیشان و پێزانینێن خۆ فرێکە بۆ گەهاندنێ.", login_error: "ئیمەیل یان پەیڤا نهێنى یا خەلەتە", logout_success: "ب سەرکەفتیانە چوويه دەر", profile_saved: "پێزانینێن پروفایلی هاتنە پاشەکەفتکرن", all_categories_label: "هەمی", install_app: "دامەزراندنا ئەپی", product_added_to_cart: "کاڵا هاتە زێدەکرن بۆ سەلکێ", product_added_to_favorites: "هاتە زێدەکرن بۆ لیستا حەزژێکریان", product_removed_from_favorites: "ژ لیستا حەزژێکریان هاتە ژێبرن", manage_categories_title: "рێکخستنا جوران", manage_contact_methods_title: "рێکخستنا رێکێن فرێکرنا داخازیێ", notifications_title: "ئاگەهداری", no_notifications_found: "چ ئاگەهداری نینن", manage_announcements_title: "رێکخستنا ئاگەهداریان", send_new_announcement: "فرێکرنا ئاگەهداریەکا نوو", send_announcement_button: "ئاگەهداریێ فرێکە", sent_announcements: "ئاگەهداریێن هاتینە فرێکرن", no_announcements_sent: "چ ئاگەهداری نەهاتینە فرێکرن", announcement_deleted_success: "ئاگەهداری هاتە ژێبرن", announcement_delete_confirm: "تو پشتڕاستی دێ ڤێ ئaگەهداریێ ژێبەی؟", enable_notifications: "چالاکرنا ئاگەهداریان", error_generic: "خەلەتییەک چێبوو!", terms_policies_title: "مەرج و سیاسەت", manage_policies_title: "рێکخستنا مەرج و سیاسەتان", policies_saved_success: "مەرج و سیاسەت هاتنە پاشەکەفتکرن", loading_policies: "...د بارکرنا سیاسەتان دایە", no_policies_found: "چ مەرج و سیاسەت نەهاتینە دانان.", has_discount_badge: "داشکان تێدایە", force_update: "ناچارکرن ب نویکرنەوە (ژێبرنا کاشی)", update_confirm: "تو پشتراستی دێ ئەپی نویکەیەڤە؟ دێ هەمی کاش د ناڤ وێبگەرا تە دا هێتە ژێبرن.", update_success: "ئەپ ب سەرکەفتیانە هاتە نویکرن!", newest_products: "نوترین کاڵا", see_all: "هەمیا ببینە", all_products_section_title: "هەمی کاڵا", }, ar: { search_placeholder: "البحث باسم المنتج...", admin_login_title: "تسجيل دخول المسؤول", email_label: "البريد الإلكتروني:", password_label: "كلمة المرور:", login_button: "تسجيل الدخول", cart_title: "سلة التسوق", cart_empty: "سلتك فارغة", total_price: "المجموع الكلي:", send_whatsapp: "إرسال عبر واتساب", send_viber: "إرسال عبر فايبر", send_telegram: "إرسال عبر تليجرام", favorites_title: "قائمة المفضلة", favorites_empty: "قائمة المفضلة فارغة", choose_category: "اختر الفئة", all_products: "كل المنتجات", loading_products: "...جاري تحميل المنتجات", settings_title: "الإعدادات", language_label: "اللغة", profile_title: "ملفي الشخصي", admin_login_nav: "تسجيل دخول المسؤول", logout_nav: "تسجيل الخروج", profile_name: "الاسم:", profile_address: "العنوان:", profile_phone: "رقم الهاتف:", save_button: "حفظ", nav_home: "الرئيسية", nav_categories: "الفئات", nav_cart: "السلة", nav_profile: "ملفي", nav_settings: "الإعدادات", contact_us_title: "تواصل معنا", add_to_cart: "إضافة إلى السلة", added_to_cart: "تمت الإضافة", product_not_found_error: "خطأ: المنتج غير موجود!", delete_confirm: "هل أنت متأكد من أنك تريد حذف هذا المنتج؟", product_deleted: "تم حذف المنتج", product_delete_error: "خطأ في حذف المنتج", order_greeting: "مرحباً! أحتاج إلى المنتجات التالية:", order_item_details: "السعر: {price} د.ع. | الكمية: {quantity}", order_total: "المجموع الكلي", order_user_info: "--- معلومات العميل ---", order_user_name: "الاسم", order_user_address: "العنوان", order_user_phone: "رقم الهاتف", order_prompt_info: "يرجى إرسال عنوانك وتفاصيلك للتوصيل.", login_error: "البريد الإلكتروني أو كلمة المرور غير صحيحة", logout_success: "تم تسجيل الخروج بنجاح", profile_saved: "تم حفظ معلومات الملف الشخصي", all_categories_label: "الكل", install_app: "تثبيت التطبيق", product_added_to_cart: "تمت إضافة المنتج إلى السلة", product_added_to_favorites: "تمت الإضافة إلى المفضلة", product_removed_from_favorites: "تمت الإزالة من المفضلة", manage_categories_title: "إدارة الفئات", manage_contact_methods_title: "إدارة طرق إرسال الطلب", notifications_title: "الإشعارات", no_notifications_found: "لا توجد إشعارات", manage_announcements_title: "إدارة الإشعارات العامة", send_new_announcement: "إرسال إشعار جدید", send_announcement_button: "إرسال الإشعار", sent_announcements: "الإشعارات المرسلة", no_announcements_sent: "لم يتم إرسال أي إشعارات", announcement_deleted_success: "تم حذف الإشعار", announcement_delete_confirm: "هل أنت متأكد من حذف هذا الإشعار؟", enable_notifications: "تفعيل الإشعارات", error_generic: "حدث خطأ!", terms_policies_title: "الشروط والسياسات", manage_policies_title: "إدارة الشروط والسياسات", policies_saved_success: "تم حفظ الشروط والسياسات بنجاح", loading_policies: "...جاري تحميل السياسات", no_policies_found: "لم يتم تحديد أي شروط أو سياسات.", has_discount_badge: "يتضمن خصم", force_update: "فرض التحديث (مسح ذاكرة التخزين المؤقت)", update_confirm: "هل أنت متأكد من رغبتك في تحديث التطبيق؟ سيتم مسح جميع بيانات ذاكرة التخزين المؤقت.", update_success: "تم تحديث التطبيق بنجاح!", newest_products: "أحدث المنتجات", see_all: "عرض الكل", all_products_section_title: "جميع المنتجات", } };

// Global State (exported to be accessed by other modules)
export let currentLanguage = localStorage.getItem('language') || 'ku_sorani';
export let deferredPrompt;
const CART_KEY = "maten_store_cart"; export let cart = JSON.parse(localStorage.getItem(CART_KEY)) || [];
const FAVORITES_KEY = "maten_store_favorites"; export let favorites = JSON.parse(localStorage.getItem(FAVORITES_KEY)) || [];
const PROFILE_KEY = "maten_store_profile"; export let userProfile = JSON.parse(localStorage.getItem(PROFILE_KEY)) || {};
export let isAdmin = false; export let editingProductId = null; export let currentSearch = '';
export let products = []; export let allPromoCards = []; export let currentPromoCardIndex = 0;
export let promoRotationInterval = null; export let categories = []; export let contactInfo = {};
export let lastVisibleProductDoc = null; export let isLoadingMoreProducts = false;
export let allProductsLoaded = false; export const PRODUCTS_PER_PAGE = 25;
export let mainPageScrollPosition = 0; export let currentCategory = 'all';
export let currentSubcategory = 'all'; export let currentSubSubcategory = 'all';
export let isRenderingHomePage = false;

// Helper to update global state variables
export function setGlobalState(key, value) {
    switch(key) {
        case 'products': products = value; break; case 'favorites': favorites = value; break;
        case 'currentCategory': currentCategory = value; break; case 'currentSubcategory': currentSubcategory = value; break;
        case 'currentSubSubcategory': currentSubSubcategory = value; break; case 'currentSearch': currentSearch = value; break;
        case 'lastVisibleProductDoc': lastVisibleProductDoc = value; break; case 'allProductsLoaded': allProductsLoaded = value; break;
        case 'isLoadingMoreProducts': isLoadingMoreProducts = value; break; case 'mainPageScrollPosition': mainPageScrollPosition = value; break;
        case 'allPromoCards': allPromoCards = value; break; case 'currentPromoCardIndex': currentPromoCardIndex = value; break;
        case 'editingProductId': editingProductId = value; break; case 'isRenderingHomePage': isRenderingHomePage = value; break;
        case 'cart': cart = value; break; case 'categories': categories = value; break;
        case 'contactInfo': contactInfo = value; break; case 'deferredPrompt': deferredPrompt = value; break;
        case 'isAdmin': isAdmin = value; break;
        default: console.warn(`Attempted to set unknown global state key: ${key}`);
    }
}

export function saveFavorites() { localStorage.setItem(FAVORITES_KEY, JSON.stringify(favorites)); }
export function saveCart() { localStorage.setItem(CART_KEY, JSON.stringify(cart)); updateCartCount(); }
function updateCartCount() { const totalItems = cart.reduce((total, item) => total + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(el => { el.textContent = totalItems; }); }

// DOM Elements (Keep local to reduce exports)
const searchInput = document.getElementById('searchInput'); const clearSearchBtn = document.getElementById('clearSearchBtn');
const loginForm = document.getElementById('loginForm'); const productForm = document.getElementById('productForm');
const homeBtn = document.getElementById('homeBtn'); const settingsBtn = document.getElementById('settingsBtn');
const profileBtn = document.getElementById('profileBtn'); const cartBtn = document.getElementById('cartBtn');
const categoriesBtn = document.getElementById('categoriesBtn'); const settingsFavoritesBtn = document.getElementById('settingsFavoritesBtn');
const settingsAdminLoginBtn = document.getElementById('settingsAdminLoginBtn'); const addProductBtn = document.getElementById('addProductBtn');
const settingsLogoutBtn = document.getElementById('settingsLogoutBtn'); const contactToggle = document.getElementById('contactToggle');
const socialMediaToggle = document.getElementById('socialMediaToggle'); const adminSocialMediaManagement = document.getElementById('adminSocialMediaManagement');
const notificationBtn = document.getElementById('notificationBtn'); const termsAndPoliciesBtn = document.getElementById('termsAndPoliciesBtn');
const policiesForm = document.getElementById('policiesForm'); const announcementForm = document.getElementById('announcementForm');
const productCategorySelect = document.getElementById('productCategoryId'); const productSubcategorySelect = document.getElementById('productSubcategoryId');
const addCategoryForm = document.getElementById('addCategoryForm'); const addSubcategoryForm = document.getElementById('addSubcategoryForm');
const addSubSubcategoryForm = document.getElementById('addSubSubcategoryForm'); const editCategoryForm = document.getElementById('editCategoryForm');
const addContactMethodForm = document.getElementById('addContactMethodForm'); const addPromoCardForm = document.getElementById('addPromoCardForm');
const enableNotificationsBtn = document.getElementById('enableNotificationsBtn'); const forceUpdateBtn = document.getElementById('forceUpdateBtn');
const updateNotification = document.getElementById('update-notification'); const updateNowBtn = document.getElementById('update-now-btn');
const imageInputsContainer = document.getElementById('imageInputsContainer');

// =======================================================
// Core Functions
// =======================================================
function debounce(func, delay = 500) { let timeout; return (...args) => { clearTimeout(timeout); timeout = setTimeout(() => { func.apply(this, args); }, delay); }; }
function populateCategoryDropdown() { const select = productCategorySelect; select.innerHTML = '<option value="" disabled selected>-- جۆرێک هەڵبژێرە --</option>'; const categoriesWithoutAll = categories.filter(cat => cat.id !== 'all'); categoriesWithoutAll.forEach(cat => { const option = document.createElement('option'); option.value = cat.id; option.textContent = cat['name_' + currentLanguage] || cat.name_ku_sorani; select.appendChild(option); }); }
function populateParentCategorySelect() { const select = document.getElementById('parentCategorySelect'); select.innerHTML = '<option value="">-- جۆرێک هەڵبژێرە --</option>'; try { const categoriesWithoutAll = categories.filter(cat => cat.id !== 'all'); categoriesWithoutAll.forEach(cat => { const option = document.createElement('option'); option.value = cat.id; option.textContent = cat['name_' + currentLanguage] || cat.name_ku_sorani; select.appendChild(option); }); } catch (error) { console.error("Error populating parent category select:", error); select.innerHTML = '<option value="">-- هەڵەیەک ڕوویدا --</option>'; } }
function rotatePromoCard() { if (allPromoCards.length <= 1) return; changePromoCard(1); }

// =======================================================
// Translation and Initialization
// =======================================================
export function setLanguage(lang) {
    setGlobalState('currentLanguage', lang); localStorage.setItem('language', lang); document.documentElement.lang = lang.startsWith('ar') ? 'ar' : 'ku'; document.documentElement.dir = 'rtl';
    document.querySelectorAll('[data-translate-key]').forEach(element => { const key = element.dataset.translateKey; const translation = t(key); if (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA') { if (element.placeholder) { element.placeholder = translation; } } else { element.textContent = translation; } });
    document.querySelectorAll('.lang-btn').forEach(btn => { btn.classList.toggle('active', btn.dataset.lang === lang); });
    const isHomeView = !currentSearch && currentCategory === 'all' && currentSubcategory === 'all' && currentSubSubcategory === 'all';
    if (isHomeView) { renderHomePageContent(); } else { renderProducts(); }
    renderMainCategories(); renderCategoriesSheet();
    if (document.getElementById('cartSheet').classList.contains('show')) renderCart();
    if (document.getElementById('favoritesSheet').classList.contains('show')) renderFavoritesPage();
    if (document.getElementById('socialLinksListContainer')) renderSocialMediaLinksAdmin();
}

async function forceUpdate() {
    if (confirm(t('update_confirm'))) {
        try {
            if ('serviceWorker' in navigator) { const registrations = await navigator.serviceWorker.getRegistrations(); for (const registration of registrations) { await registration.unregister(); } console.log('Service Workers unregistered.'); }
            if (window.caches) { const keys = await window.caches.keys(); await Promise.all(keys.map(key => window.caches.delete(key))); console.log('All caches cleared.'); }
            showNotification(t('update_success'), 'success'); setTimeout(() => { window.location.reload(true); }, 1500);
        } catch (error) { console.error('Error during force update:', error); showNotification(t('error_generic'), 'error'); }
    }
}

// =======================================================
// Event Listeners
// =======================================================
function setupEventListeners() {
    homeBtn.onclick = () => { history.pushState({ type: 'page', id: 'mainPage' }, '', window.location.pathname); showPage('mainPage'); }; settingsBtn.onclick = () => { history.pushState({ type: 'page', id: 'settingsPage' }, '', '#settingsPage'); showPage('settingsPage'); }; profileBtn.onclick = () => { openPopup('profileSheet'); updateActiveNav('profileBtn'); }; cartBtn.onclick = () => { openPopup('cartSheet'); updateActiveNav('cartBtn'); }; categoriesBtn.onclick = () => { openPopup('categoriesSheet'); updateActiveNav('categoriesBtn'); }; settingsFavoritesBtn.onclick = () => { openPopup('favoritesSheet'); }; settingsAdminLoginBtn.onclick = () => { openPopup('loginModal', 'modal'); }; addProductBtn.onclick = () => { setGlobalState('editingProductId', null); productForm.reset(); createProductImageInputs(); document.getElementById('subcategorySelectContainer').style.display = 'none'; document.getElementById('subSubcategorySelectContainer').style.display = 'none'; document.getElementById('formTitle').textContent = 'زیادکردنی کاڵای نوێ'; productForm.querySelector('button[type="submit"]').textContent = 'پاشەکەوتکردن'; openPopup('productFormModal', 'modal'); }; settingsLogoutBtn.onclick = async () => { await signOut(auth); }; document.querySelectorAll('.close').forEach(btn => btn.onclick = () => history.back()); document.getElementById('sheet-overlay').onclick = () => history.back(); window.onclick = (e) => { if (e.target.classList.contains('modal')) history.back(); }; window.addEventListener('popstate', (event) => { closeAllPopupsUI(); const state = event.state; if (state) { if (state.type === 'page') { showPage(state.id); } else if (state.type === 'sheet' || state.type === 'modal') { openPopup(state.id, state.type); } } else { showPage('mainPage'); } });

    loginForm.onsubmit = async (e) => { e.preventDefault(); try { await signInWithEmailAndPassword(auth, document.getElementById('email').value, document.getElementById('password').value); } catch (error) { showNotification(t('login_error'), 'error'); } };
    productCategorySelect.addEventListener('change', (e) => { populateSubcategoriesDropdown(e.target.value); populateSubSubcategoriesDropdown(null, null); });
    productSubcategorySelect.addEventListener('change', (e) => { const mainCatId = productCategorySelect.value; populateSubSubcategoriesDropdown(mainCatId, e.target.value); });

    productForm.onsubmit = async (e) => { e.preventDefault(); const submitButton = e.target.querySelector('button[type="submit"]'); submitButton.disabled = true; submitButton.textContent = '...چاوەڕێ بە'; const imageUrls = Array.from(document.querySelectorAll('.productImageUrl')).map(input => input.value.trim()).filter(url => url !== ''); if (imageUrls.length === 0) { showNotification('پێویستە بەلایەنی کەمەوە لینکی یەک وێنە دابنێیت', 'error'); submitButton.disabled = false; submitButton.textContent = editingProductId ? 'نوێکردنەوە' : 'پاشەکەوتکردن'; return; }
        const productDescriptionObject = { ku_sorani: document.getElementById('productDescriptionKuSorani').value, ku_badini: document.getElementById('productDescriptionKuBadini').value, ar: document.getElementById('productDescriptionAr').value }; const productNameKuSorani = document.getElementById('productNameKuSorani').value; const productNameObject = { ku_sorani: productNameKuSorani, ku_badini: document.getElementById('productNameKuBadini').value, ar: document.getElementById('productNameAr').value };
        try {
            const productData = { name: productNameObject, searchableName: productNameKuSorani.toLowerCase(), price: parseInt(document.getElementById('productPrice').value), originalPrice: parseInt(document.getElementById('productOriginalPrice').value) || null, categoryId: productCategorySelect.value, subcategoryId: productSubcategorySelect.value || null, subSubcategoryId: document.getElementById('productSubSubcategoryId').value || null, description: productDescriptionObject, imageUrls: imageUrls, externalLink: document.getElementById('productExternalLink').value || null, shippingInfo: { ku_sorani: document.getElementById('shippingInfoKuSorani').value.trim(), ku_badini: document.getElementById('shippingInfoKuBadini').value.trim(), ar: document.getElementById('shippingInfoAr').value.trim() } };
            if (!editingProductId) { productData.createdAt = Date.now(); }
            if (editingProductId) { const { createdAt, ...updateData } = productData; await updateDoc(doc(db, "products", editingProductId), updateData); showNotification('کاڵا نوێکرایەوە', 'success'); } else { await addDoc(productsCollection, productData); showNotification('کاڵا زیادکرا', 'success'); }
            history.back(); searchProductsInFirestore(currentSearch, true);
        } catch (error) { showNotification(t('error_generic'), 'error'); console.error("Error saving product:", error); } finally { submitButton.disabled = false; submitButton.textContent = editingProductId ? 'نوێکردنەوە' : 'پاشەکەوتکردن'; setGlobalState('editingProductId', null); }
    };
    imageInputsContainer.addEventListener('input', (e) => { if (e.target.classList.contains('productImageUrl')) { const previewImg = e.target.nextElementSibling; const url = e.target.value; if (url) { previewImg.src = url; } else { const index = Array.from(e.target.parentElement.parentElement.children).indexOf(e.target.parentElement); previewImg.src = `https://placehold.co/40x40/e2e8f0/2d3748?text=${index + 1}`; } } });
    const debouncedSearch = debounce((term) => { searchProductsInFirestore(term, true); }, 500); searchInput.oninput = () => { const searchTerm = searchInput.value; setGlobalState('currentSearch', searchTerm); clearSearchBtn.style.display = searchTerm ? 'block' : 'none'; debouncedSearch(searchTerm); };
    clearSearchBtn.onclick = () => { searchInput.value = ''; setGlobalState('currentSearch', ''); clearSearchBtn.style.display = 'none'; searchProductsInFirestore('', true); };
    contactToggle.onclick = () => { const container = document.getElementById('dynamicContactLinksContainer'); const chevron = contactToggle.querySelector('.contact-chevron'); container.classList.toggle('open'); chevron.classList.toggle('open'); }; socialMediaToggle.onclick = () => { const container = adminSocialMediaManagement.querySelector('.contact-links-container'); const chevron = socialMediaToggle.querySelector('.contact-chevron'); container.classList.toggle('open'); chevron.classList.toggle('open'); };
    document.getElementById('profileForm').onsubmit = (e) => { e.preventDefault(); setGlobalState('userProfile', { name: document.getElementById('profileName').value, address: document.getElementById('profileAddress').value, phone: document.getElementById('profilePhone').value, }); localStorage.setItem(PROFILE_KEY, JSON.stringify(userProfile)); showNotification(t('profile_saved'), 'success'); history.back(); };
    document.querySelectorAll('.lang-btn').forEach(btn => { btn.onclick = () => { setLanguage(btn.dataset.lang); }; });
    if (document.getElementById('installAppBtn')) { document.getElementById('installAppBtn').addEventListener('click', async () => { if (deferredPrompt) { document.getElementById('installAppBtn').style.display = 'none'; deferredPrompt.prompt(); const { outcome } = await deferredPrompt.userChoice; console.log(`User response to the install prompt: ${outcome}`); setGlobalState('deferredPrompt', null); } }); }
    if (addCategoryForm) { addCategoryForm.addEventListener('submit', async (e) => { e.preventDefault(); const submitButton = e.target.querySelector('button[type="submit"]'); submitButton.disabled = true; submitButton.textContent = '...پاشەکەوت دەکرێت'; const categoryData = { name_ku_sorani: document.getElementById('mainCategoryNameKuSorani').value, name_ku_badini: document.getElementById('mainCategoryNameKuBadini').value, name_ar: document.getElementById('mainCategoryNameAr').value, icon: document.getElementById('mainCategoryIcon').value, order: parseInt(document.getElementById('mainCategoryOrder').value) }; try { await addDoc(categoriesCollection, categoryData); showNotification('جۆری سەرەکی بە سەرکەوتوویی زیادکرا', 'success'); addCategoryForm.reset(); } catch (error) { console.error("Error adding main category: ", error); showNotification(t('error_generic'), 'error'); } finally { submitButton.disabled = false; submitButton.textContent = 'پاشەکەوتکردنی جۆری سەرەکی'; } }); }
    if (addSubcategoryForm) { addSubcategoryForm.addEventListener('submit', async (e) => { e.preventDefault(); const submitButton = e.target.querySelector('button[type="submit"]'); const parentCategoryId = document.getElementById('parentCategorySelect').value; if (!parentCategoryId) { showNotification('تکایە جۆری سەرەکی هەڵبژێرە', 'error'); return; } submitButton.disabled = true; submitButton.textContent = '...پاشەکەوت دەکرێت'; const subcategoryData = { name_ku_sorani: document.getElementById('subcategoryNameKuSorani').value, name_ku_badini: document.getElementById('subcategoryNameKuBadini').value, name_ar: document.getElementById('subcategoryNameAr').value, order: parseInt(document.getElementById('subcategoryOrder').value) || 0 }; try { const subcategoriesCollectionRef = collection(db, "categories", parentCategoryId, "subcategories"); await addDoc(subcategoriesCollectionRef, subcategoryData); showNotification('جۆری لاوەکی بە سەرکەوتوویی زیادکرا', 'success'); addSubcategoryForm.reset(); } catch (error) { console.error("Error adding subcategory: ", error); showNotification(t('error_generic'), 'error'); } finally { submitButton.disabled = false; submitButton.textContent = 'پاشەکەوتکردنی جۆری لاوەکی'; } }); }
    if (addSubSubcategoryForm) { addSubSubcategoryForm.addEventListener('submit', async (e) => { e.preventDefault(); const mainCatSelect = document.getElementById('parentMainCategorySelectForSubSub'); const subCatSelect = document.getElementById('parentSubcategorySelectForSubSub'); const mainCatId = mainCatSelect.value; const subCatId = subCatSelect.value; if (!mainCatId || !subCatId) { showNotification('تکایە هەردوو جۆرەکە هەڵبژێرە', 'error'); return; } const subSubcategoryData = { name_ku_sorani: document.getElementById('subSubcategoryNameKuSorani').value, name_ku_badini: document.getElementById('subSubcategoryNameKuBadini').value, name_ar: document.getElementById('subSubcategoryNameAr').value, order: parseInt(document.getElementById('subSubcategoryOrder').value) || 0, createdAt: Date.now() }; try { const subSubcategoriesRef = collection(db, "categories", mainCatId, "subcategories", subCatId, "subSubcategories"); await addDoc(subSubcategoriesRef, subSubcategoryData); showNotification('جۆری نوێ بە سەرکەوتوویی زیادکرا', 'success'); addSubSubcategoryForm.reset(); mainCatSelect.value = ''; subCatSelect.innerHTML = '<option value="" disabled selected>-- چاوەڕێی هەڵبژاردنی جۆری سەرەکی بە --</option>'; } catch (error) { console.error("Error adding sub-subcategory: ", error); showNotification('هەڵەیەک ڕوویدا', 'error'); } }); }
    if (editCategoryForm) { editCategoryForm.addEventListener('submit', async (e) => { e.preventDefault(); const submitButton = e.target.querySelector('button[type="submit"]'); submitButton.disabled = true; submitButton.textContent = '...پاشەکەوت دەکرێت'; const docPath = document.getElementById('editCategoryDocPath').value; const level = document.getElementById('editCategoryLevel').value; let updateData = { name_ku_sorani: document.getElementById('editCategoryNameKuSorani').value, name_ku_badini: document.getElementById('editCategoryNameKuBadini').value, name_ar: document.getElementById('editCategoryNameAr').value, order: parseInt(document.getElementById('editCategoryOrder').value) || 0 }; if (level === '1') { updateData.icon = document.getElementById('editCategoryIcon').value; } try { await updateDoc(doc(db, docPath), updateData); showNotification('گۆڕانکارییەکان پاشەکەوت کران', 'success'); history.back(); } catch (error) { console.error("Error updating category: ", error); showNotification('هەڵەیەک ڕوویدا', 'error'); } finally { submitButton.disabled = false; submitButton.textContent = 'پاشەکەوتکردنی گۆڕانکاری'; } }); }
    if (addContactMethodForm) { addContactMethodForm.addEventListener('submit', async (e) => { e.preventDefault(); const submitButton = e.target.querySelector('button[type="submit"]'); submitButton.disabled = true; const methodData = { type: document.getElementById('contactMethodType').value, value: document.getElementById('contactMethodValue').value, name_ku_sorani: document.getElementById('contactMethodNameKuSorani').value, name_ku_badini: document.getElementById('contactMethodNameKuBadini').value, name_ar: document.getElementById('contactMethodNameAr').value, icon: document.getElementById('contactMethodIcon').value, color: document.getElementById('contactMethodColor').value, createdAt: Date.now() }; try { const methodsCollection = collection(db, 'settings', 'contactInfo', 'contactMethods'); await addDoc(methodsCollection, methodData); showNotification('شێوازی نوێ بە سەرکەوتوویی زیادکرا', 'success'); addContactMethodForm.reset(); } catch (error) { console.error("Error adding contact method: ", error); showNotification(t('error_generic'), 'error'); } finally { submitButton.disabled = false; } }); }
    if (document.getElementById('addSocialMediaForm')) { document.getElementById('addSocialMediaForm').addEventListener('submit', async (e) => { e.preventDefault(); const submitButton = e.target.querySelector('button[type="submit"]'); submitButton.disabled = true; const linkData = { name_ku_sorani: document.getElementById('socialNameKuSorani').value, name_ku_badini: document.getElementById('socialNameKuBadini').value, name_ar: document.getElementById('socialNameAr').value, url: document.getElementById('socialUrl').value, icon: document.getElementById('socialIcon').value, createdAt: Date.now() }; try { const socialLinksCollection = collection(db, 'settings', 'contactInfo', 'socialLinks'); await addDoc(socialLinksCollection, linkData); showNotification('لینکی نوێ بە سەرکەوتوویی زیادکرا', 'success'); document.getElementById('addSocialMediaForm').reset(); } catch (error) { showNotification(t('error_generic'), 'error'); } finally { submitButton.disabled = false; } }); }
    notificationBtn.addEventListener('click', () => { openPopup('notificationsSheet'); }); if (termsAndPoliciesBtn) { termsAndPoliciesBtn.addEventListener('click', () => { openPopup('termsSheet'); }); }
    if (policiesForm) { policiesForm.addEventListener('submit', async (e) => { e.preventDefault(); const submitButton = e.target.querySelector('button[type="submit"]'); submitButton.disabled = true; const policiesData = { content: { ku_sorani: document.getElementById('policiesContentKuSorani').value, ku_badini: document.getElementById('policiesContentKuBadini').value, ar: document.getElementById('policiesContentAr').value, } }; try { const docRef = doc(db, "settings", "policies"); await setDoc(docRef, policiesData, { merge: true }); showNotification(t('policies_saved_success'), 'success'); } catch (error) { console.error("Error saving policies:", error); showNotification(t('error_generic'), 'error'); } finally { submitButton.disabled = false; } }); }
    if(addPromoCardForm) { addPromoCardForm.addEventListener('submit', async (e) => { e.preventDefault(); const submitButton = e.target.querySelector('button[type="submit"]'); submitButton.disabled = true; const editingId = document.getElementById('editingPromoCardId').value; const cardData = { imageUrls: { ku_sorani: document.getElementById('promoCardImageKuSorani').value, ku_badini: document.getElementById('promoCardImageKuBadini').value, ar: document.getElementById('promoCardImageAr').value, }, categoryId: document.getElementById('promoCardTargetCategory').value, order: parseInt(document.getElementById('promoCardOrder').value), }; if (!editingId) { cardData.createdAt = Date.now(); } try { if (editingId) { await setDoc(doc(db, "promo_cards", editingId), cardData); showNotification('کارتەکە نوێکرایەوە', 'success'); } else { await addDoc(promoCardsCollection, cardData); showNotification('کارتی نوێ زیادکرا', 'success'); } addPromoCardForm.reset(); document.getElementById('editingPromoCardId').value = ''; submitButton.textContent = 'پاشەکەوتکردن'; } catch (error) { showNotification('هەڵەیەک ڕوویدا', 'error'); } finally { submitButton.disabled = false; } }); }
    if (enableNotificationsBtn) { enableNotificationsBtn.addEventListener('click', requestNotificationPermission); } if(forceUpdateBtn) { forceUpdateBtn.addEventListener('click', forceUpdate); }
    onMessage(messaging, (payload) => { console.log('Foreground message received: ', payload); const title = payload.notification.title; const body = payload.notification.body; showNotification(`${title}: ${body}`, 'success'); });
}

async function requestNotificationPermission() { try { const permission = await Notification.requestPermission(); if (permission === 'granted') { showNotification('مۆڵەتی ناردنی ئاگەداری درا', 'success'); const currentToken = await getToken(messaging, { vapidKey: 'BIepTNN6INcxIW9Of96udIKoMXZNTmP3q3aflB6kNLY3FnYe_3U6bfm3gJirbU9RgM3Ex0o1oOScF_sRBTsPyfQ' }); if (currentToken) { await saveTokenToFirestore(currentToken); } } else { showNotification('مۆڵەت نەدرا', 'error'); } } catch (error) { console.error('An error occurred while requesting permission: ', error); } }
async function saveTokenToFirestore(token) { try { const tokensCollection = collection(db, 'device_tokens'); await setDoc(doc(tokensCollection, token), { createdAt: Date.now() }); } catch (error) { console.error('Error saving token to Firestore: ', error); } }
function setupScrollObserver() { const trigger = document.getElementById('scroll-loader-trigger'); if (!trigger) return; const observer = new IntersectionObserver((entries) => { if (entries[0].isIntersecting) { searchProductsInFirestore(currentSearch, false); } }, { root: null, threshold: 0.1 }); observer.observe(trigger); }
function createProductImageInputs(imageUrls = []) { imageInputsContainer.innerHTML = ''; for (let i = 0; i < 4; i++) { const url = imageUrls[i] || ''; const isRequired = i === 0 ? 'required' : ''; const placeholder = i === 0 ? 'لینکی وێنەی یەکەم (سەرەکی)' : `لینکی وێنەی ${['دووەم', 'سێیەم', 'چوارەم'][i-1]}`; const previewSrc = url || `https://placehold.co/40x40/e2e8f0/2d3748?text=${i + 1}`; const inputGroup = document.createElement('div'); inputGroup.className = 'image-input-group'; inputGroup.innerHTML = `<input type="text" class="productImageUrl" placeholder="${placeholder}" value="${url}" ${isRequired}><img src="${previewSrc}" class="image-preview-small" onerror="this.src='https://placehold.co/40x40/e2e8f0/2d3748?text=Err'">`; imageInputsContainer.appendChild(inputGroup); } }
async function populateSubSubcategoriesDropdown(mainCategoryId, subcategoryId, selectedSubSubcategoryId = null) { const container = document.getElementById('subSubcategorySelectContainer'); const select = document.getElementById('productSubSubcategoryId'); if (!mainCategoryId || !subcategoryId) { container.style.display = 'none'; select.innerHTML = ''; return; } select.innerHTML = '<option value="" disabled selected>...چاوەڕێ بە</option>'; select.disabled = true; container.style.display = 'block'; try { const ref = collection(db, "categories", mainCategoryId, "subcategories", subcategoryId, "subSubcategories"); const q = query(ref, orderBy("order", "asc")); const snapshot = await getDocs(q); select.innerHTML = '<option value="">-- هیچ --</option>'; if (!snapshot.empty) { snapshot.forEach(doc => { const subSubcat = { id: doc.id, ...doc.data() }; const option = document.createElement('option'); option.value = subSubcat.id; option.textContent = subSubcat.name_ku_sorani; if (subSubcat.id === selectedSubSubcategoryId) { option.selected = true; } select.appendChild(option); }); } } catch (error) { console.error("Error fetching sub-subcategories for form:", error); select.innerHTML = '<option value="" disabled>هەڵەیەک ڕوویدا</option>'; } finally { select.disabled = false; } }

// =======================================================
// Initialization Sequence
// =======================================================
onAuthStateChanged(auth, async (user) => { const adminUID = "xNjDmjYkTxOjEKURGP879wvgpcG3"; if (user && user.uid === adminUID) { setGlobalState('isAdmin', true); sessionStorage.setItem('isAdmin', 'true'); loadPoliciesForAdmin(); if (document.getElementById('loginModal').style.display === 'block') { history.back(); } } else { setGlobalState('isAdmin', false); sessionStorage.removeItem('isAdmin'); if (user) { await signOut(auth); } } updateAdminUI(isAdmin); searchProductsInFirestore(currentSearch, true); });

function init() {
    renderSkeletonLoader(); enableIndexedDbPersistence(db).then(() => { console.log("Firestore offline persistence enabled successfully."); initializeAppLogic(); }).catch((err) => { if (err.code == 'failed-precondition') { console.warn('Firestore Persistence failed: Multiple tabs open.'); } else if (err.code == 'unimplemented') { console.warn('Firestore Persistence failed: Browser not supported.'); } console.error("Error enabling persistence, running online mode only:", err); initializeAppLogic(); });
}

function initializeAppLogic() {
    const categoriesQuery = query(categoriesCollection, orderBy("order", "asc")); onSnapshot(categoriesQuery, (snapshot) => { const fetchedCategories = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })); setGlobalState('categories', [{ id: 'all', icon: 'fas fa-th' }, ...fetchedCategories]); populateCategoryDropdown(); renderMainCategories(); if (isAdmin) { populateParentCategorySelect(); renderCategoryManagementUI(); const mainCatSelectForSubSub = document.getElementById('parentMainCategorySelectForSubSub'); const subCatSelectForSubSub = document.getElementById('parentSubcategorySelectForSubSub'); if (mainCatSelectForSubSub && subCatSelectForSubSub) { mainCatSelectForSubSub.innerHTML = '<option value="" disabled selected>-- جۆرێک هەڵبژێرە --</option>'; categories.filter(cat => cat.id !== 'all').forEach(cat => { const option = document.createElement('option'); option.value = cat.id; option.textContent = cat.name_ku_sorani || cat.name_ku_badini; mainCatSelectForSubSub.appendChild(option); }); if (!mainCatSelectForSubSub.listenerAttached) { mainCatSelectForSubSub.addEventListener('change', async () => { const mainCategoryId = mainCatSelectForSubSub.value; if (!mainCategoryId) { subCatSelectForSubSub.innerHTML = '<option value="" disabled selected>-- چاوەڕێی هەڵبژاردنی جۆری سەرەکی بە --</option>'; return; }; subCatSelectForSubSub.innerHTML = '<option value="" disabled selected>...خەریکی بارکردنە</option>'; subCatSelectForSubSub.disabled = true; const subcategoriesQuery = collection(db, "categories", mainCategoryId, "subcategories"); const q = query(subcategoriesQuery, orderBy("order", "asc")); const querySnapshot = await getDocs(q); subCatSelectForSubSub.innerHTML = '<option value="" disabled selected>-- جۆری لاوەکی هەڵبژێرە --</option>'; if (!querySnapshot.empty) { querySnapshot.forEach(doc => { const subcat = { id: doc.id, ...doc.data() }; const option = document.createElement('option'); option.value = subcat.id; option.textContent = subcat.name_ku_sorani || subcat.name_ku_badini || 'بێ ناو'; subCatSelectForSubSub.appendChild(option); }); } else { subCatSelectForSubSub.innerHTML = '<option value="" disabled selected>هیچ جۆرێکی لاوەکی نییە</option>'; } subCatSelectForSubSub.disabled = false; }); mainCatSelectForSubSub.listenerAttached = true; } } } setLanguage(currentLanguage); });
    searchProductsInFirestore('', true);
    const contactInfoRef = doc(db, "settings", "contactInfo"); onSnapshot(contactInfoRef, (docSnap) => { if (docSnap.exists()) { setGlobalState('contactInfo', docSnap.data()); } else { console.log("No contact info document found!"); } });
    updateCartCount(); setupEventListeners(); setupScrollObserver(); setLanguage(currentLanguage); renderSocialMediaLinksAdmin(); renderContactLinks(); checkNewAnnouncements(); showWelcomeMessage(); setupGpsButton(); handleInitialPageLoad();
}

function showWelcomeMessage() { if (!localStorage.getItem('hasVisited')) { openPopup('welcomeModal', 'modal'); localStorage.setItem('hasVisited', 'true'); } }
function handleInitialPageLoad() { const hash = window.location.hash.substring(1); const element = document.getElementById(hash); if (hash === 'settingsPage') { showPage('settingsPage'); history.replaceState({ type: 'page', id: 'settingsPage' }, '', '#settingsPage'); } else { showPage('mainPage'); history.replaceState({ type: 'page', id: 'mainPage' }, '', window.location.pathname); } if (element) { const isSheet = element.classList.contains('bottom-sheet'); const isModal = element.classList.contains('modal'); if (isSheet || isModal) { openPopup(hash, isSheet ? 'sheet' : 'modal'); } } }
function renderContactLinks() { const contactLinksContainer = document.getElementById('dynamicContactLinksContainer'); const socialLinksCollection = collection(db, 'settings', 'contactInfo', 'socialLinks'); const q = query(socialLinksCollection, orderBy("createdAt", "desc")); onSnapshot(q, (snapshot) => { contactLinksContainer.innerHTML = ''; if (snapshot.empty) { contactLinksContainer.innerHTML = '<p style="padding: 15px; text-align: center;">هیچ لینکی پەیوەندی نییە.</p>'; return; } snapshot.forEach(doc => { const link = doc.data(); const name = link['name_' + currentLanguage] || link.name_ku_sorani; const linkElement = document.createElement('a'); linkElement.href = link.url; linkElement.target = '_blank'; linkElement.className = 'settings-item'; linkElement.innerHTML = `<div><i class="${link.icon}" style="margin-left: 10px;"></i><span>${name}</span></div><i class="fas fa-external-link-alt"></i>`; contactLinksContainer.appendChild(linkElement); }); }); }

document.addEventListener('DOMContentLoaded', init);
window.addEventListener('beforeinstallprompt', (e) => { e.preventDefault(); setGlobalState('deferredPrompt', e); const installBtn = document.getElementById('installAppBtn'); if (installBtn) { installBtn.style.display = 'flex'; } });
if ('serviceWorker' in navigator) { navigator.serviceWorker.register('/sw.js').then(registration => { console.log('Service Worker registered successfully.'); registration.addEventListener('updatefound', () => { const newWorker = registration.installing; console.log('New service worker found!', newWorker); newWorker.addEventListener('statechange', () => { if (newWorker.state === 'installed' && navigator.serviceWorker.controller) { updateNotification.classList.add('show'); } }); }); updateNowBtn.addEventListener('click', () => { registration.waiting.postMessage({ action: 'skipWaiting' }); }); }).catch(err => { console.log('Service Worker registration failed: ', err); }); navigator.serviceWorker.addEventListener('controllerchange', () => { console.log('New Service Worker activated. Reloading page...'); window.location.reload(); }); }